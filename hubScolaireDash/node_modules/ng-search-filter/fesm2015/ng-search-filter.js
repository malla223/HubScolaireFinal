import { ɵɵdefineInjectable, ɵsetClassMetadata, Injectable, ɵɵdirectiveInject, ɵɵdefinePipe, Pipe, ɵɵdefineNgModule, ɵɵdefineInjector, ɵɵsetNgModuleScope, NgModule } from '@angular/core';

class NgSearchFilterService {
    constructor() { }
    get defaultLang() {
        return this._defaultLang || 'tr';
    }
    set defaultLang(defaultLang) {
        this._defaultLang = defaultLang;
    }
    getDefaultLang() {
        return this.defaultLang;
    }
    setDefaultLang(defaultLang) {
        this.defaultLang = defaultLang;
    }
}
NgSearchFilterService.ɵfac = function NgSearchFilterService_Factory(t) { return new (t || NgSearchFilterService)(); };
NgSearchFilterService.ɵprov = ɵɵdefineInjectable({ token: NgSearchFilterService, factory: NgSearchFilterService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NgSearchFilterService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return []; }, null); })();

class NgSearchFilterPipe {
    constructor(_ngSearchFilterService) {
        this._ngSearchFilterService = _ngSearchFilterService;
        this._lang = this._ngSearchFilterService.getDefaultLang();
    }
    /**
     * @param items object from array
     * @param term term's search
     * @param excludes array of strings which will ignored during search
     */
    transform(items, term, excludes = []) {
        if (!term || !items)
            return items;
        return NgSearchFilterPipe.filter(items, term, excludes, this._lang);
    }
    /**
     *
     * @param items List of items to filter
     * @param term  a string term to compare with every property of the list
     * @param excludes List of keys which will be ignored during search
     *
     */
    static filter(items, term, excludes, lang) {
        const toCompare = term.toLocaleLowerCase(lang);
        function checkInside(item, term) {
            if (typeof item === 'string' &&
                item.toString().toLocaleLowerCase(lang).includes(toCompare)) {
                return true;
            }
            for (let property in item) {
                if (item[property] === null ||
                    item[property] == undefined ||
                    excludes.includes(property)) {
                    continue;
                }
                if (typeof item[property] === 'object') {
                    if (checkInside(item[property], term)) {
                        return true;
                    }
                }
                else if (item[property].toString().toLocaleLowerCase(lang).includes(toCompare)) {
                    return true;
                }
            }
            return false;
        }
        return items.filter(function (item) {
            return checkInside(item, term);
        });
    }
}
NgSearchFilterPipe.ɵfac = function NgSearchFilterPipe_Factory(t) { return new (t || NgSearchFilterPipe)(ɵɵdirectiveInject(NgSearchFilterService)); };
NgSearchFilterPipe.ɵpipe = ɵɵdefinePipe({ name: "filter", type: NgSearchFilterPipe, pure: false });
NgSearchFilterPipe.ɵprov = ɵɵdefineInjectable({ token: NgSearchFilterPipe, factory: NgSearchFilterPipe.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NgSearchFilterPipe, [{
        type: Pipe,
        args: [{
                name: 'filter',
                pure: false,
            }]
    }, {
        type: Injectable
    }], function () { return [{ type: NgSearchFilterService }]; }, null); })();

class NgSearchFilterModule {
}
NgSearchFilterModule.ɵmod = ɵɵdefineNgModule({ type: NgSearchFilterModule });
NgSearchFilterModule.ɵinj = ɵɵdefineInjector({ factory: function NgSearchFilterModule_Factory(t) { return new (t || NgSearchFilterModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NgSearchFilterModule, { declarations: [NgSearchFilterPipe], exports: [NgSearchFilterPipe] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NgSearchFilterModule, [{
        type: NgModule,
        args: [{
                declarations: [NgSearchFilterPipe],
                exports: [NgSearchFilterPipe],
            }]
    }], null, null); })();

/*
 * Public API Surface of ng-search-filter
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgSearchFilterModule, NgSearchFilterPipe, NgSearchFilterService };
//# sourceMappingURL=ng-search-filter.js.map
