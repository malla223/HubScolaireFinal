import { Pipe, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./ng-search-filter.service";
export class NgSearchFilterPipe {
    constructor(_ngSearchFilterService) {
        this._ngSearchFilterService = _ngSearchFilterService;
        this._lang = this._ngSearchFilterService.getDefaultLang();
    }
    /**
     * @param items object from array
     * @param term term's search
     * @param excludes array of strings which will ignored during search
     */
    transform(items, term, excludes = []) {
        if (!term || !items)
            return items;
        return NgSearchFilterPipe.filter(items, term, excludes, this._lang);
    }
    /**
     *
     * @param items List of items to filter
     * @param term  a string term to compare with every property of the list
     * @param excludes List of keys which will be ignored during search
     *
     */
    static filter(items, term, excludes, lang) {
        const toCompare = term.toLocaleLowerCase(lang);
        function checkInside(item, term) {
            if (typeof item === 'string' &&
                item.toString().toLocaleLowerCase(lang).includes(toCompare)) {
                return true;
            }
            for (let property in item) {
                if (item[property] === null ||
                    item[property] == undefined ||
                    excludes.includes(property)) {
                    continue;
                }
                if (typeof item[property] === 'object') {
                    if (checkInside(item[property], term)) {
                        return true;
                    }
                }
                else if (item[property].toString().toLocaleLowerCase(lang).includes(toCompare)) {
                    return true;
                }
            }
            return false;
        }
        return items.filter(function (item) {
            return checkInside(item, term);
        });
    }
}
NgSearchFilterPipe.ɵfac = function NgSearchFilterPipe_Factory(t) { return new (t || NgSearchFilterPipe)(i0.ɵɵdirectiveInject(i1.NgSearchFilterService)); };
NgSearchFilterPipe.ɵpipe = i0.ɵɵdefinePipe({ name: "filter", type: NgSearchFilterPipe, pure: false });
NgSearchFilterPipe.ɵprov = i0.ɵɵdefineInjectable({ token: NgSearchFilterPipe, factory: NgSearchFilterPipe.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(NgSearchFilterPipe, [{
        type: Pipe,
        args: [{
                name: 'filter',
                pure: false,
            }]
    }, {
        type: Injectable
    }], function () { return [{ type: i1.NgSearchFilterService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2VhcmNoLWZpbHRlci5waXBlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL2V5dC9EZXNrdG9wL25nLXNlYXJjaC1maWx0ZXIvcHJvamVjdHMvbmctc2VhcmNoLWZpbHRlci9zcmMvIiwic291cmNlcyI6WyJsaWIvbmctc2VhcmNoLWZpbHRlci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBUWhFLE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsWUFBb0Isc0JBQTZDO1FBQTdDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBdUI7UUFDekQsVUFBSyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQURPLENBQUM7SUFFckU7Ozs7T0FJRztJQUNILFNBQVMsQ0FBQyxLQUFVLEVBQUUsSUFBWSxFQUFFLFdBQWdCLEVBQUU7UUFDcEQsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUVsQyxPQUFPLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxNQUFNLENBQ1gsS0FBb0MsRUFDcEMsSUFBWSxFQUNaLFFBQWEsRUFDYixJQUFZO1FBRVosTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRS9DLFNBQVMsV0FBVyxDQUFDLElBQVMsRUFBRSxJQUFZO1lBQzFDLElBQ0UsT0FBTyxJQUFJLEtBQUssUUFBUTtnQkFDeEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFDM0Q7Z0JBQ0EsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUVELEtBQUssSUFBSSxRQUFRLElBQUksSUFBSSxFQUFFO2dCQUN6QixJQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJO29CQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksU0FBUztvQkFDM0IsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFDM0I7b0JBQ0EsU0FBUztpQkFDVjtnQkFDRCxJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLFFBQVEsRUFBRTtvQkFDdEMsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFO3dCQUNyQyxPQUFPLElBQUksQ0FBQztxQkFDYjtpQkFDRjtxQkFBTSxJQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQ3JFO29CQUNBLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2FBQ0Y7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFFRCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJO1lBQ2hDLE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O29GQTdEVSxrQkFBa0I7bUVBQWxCLGtCQUFrQjswREFBbEIsa0JBQWtCLFdBQWxCLGtCQUFrQjtrREFBbEIsa0JBQWtCO2NBTDlCLElBQUk7ZUFBQztnQkFDSixJQUFJLEVBQUUsUUFBUTtnQkFDZCxJQUFJLEVBQUUsS0FBSzthQUNaOztjQUNBLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ1NlYXJjaEZpbHRlclNlcnZpY2UgfSBmcm9tICcuL25nLXNlYXJjaC1maWx0ZXIuc2VydmljZSc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2ZpbHRlcicsXG4gIHB1cmU6IGZhbHNlLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ1NlYXJjaEZpbHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfbmdTZWFyY2hGaWx0ZXJTZXJ2aWNlOiBOZ1NlYXJjaEZpbHRlclNlcnZpY2UpIHt9XG4gIHByaXZhdGUgX2xhbmcgPSB0aGlzLl9uZ1NlYXJjaEZpbHRlclNlcnZpY2UuZ2V0RGVmYXVsdExhbmcoKTtcbiAgLyoqXG4gICAqIEBwYXJhbSBpdGVtcyBvYmplY3QgZnJvbSBhcnJheVxuICAgKiBAcGFyYW0gdGVybSB0ZXJtJ3Mgc2VhcmNoXG4gICAqIEBwYXJhbSBleGNsdWRlcyBhcnJheSBvZiBzdHJpbmdzIHdoaWNoIHdpbGwgaWdub3JlZCBkdXJpbmcgc2VhcmNoXG4gICAqL1xuICB0cmFuc2Zvcm0oaXRlbXM6IGFueSwgdGVybTogc3RyaW5nLCBleGNsdWRlczogYW55ID0gW10pOiBhbnkge1xuICAgIGlmICghdGVybSB8fCAhaXRlbXMpIHJldHVybiBpdGVtcztcblxuICAgIHJldHVybiBOZ1NlYXJjaEZpbHRlclBpcGUuZmlsdGVyKGl0ZW1zLCB0ZXJtLCBleGNsdWRlcywgdGhpcy5fbGFuZyk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGl0ZW1zIExpc3Qgb2YgaXRlbXMgdG8gZmlsdGVyXG4gICAqIEBwYXJhbSB0ZXJtICBhIHN0cmluZyB0ZXJtIHRvIGNvbXBhcmUgd2l0aCBldmVyeSBwcm9wZXJ0eSBvZiB0aGUgbGlzdFxuICAgKiBAcGFyYW0gZXhjbHVkZXMgTGlzdCBvZiBrZXlzIHdoaWNoIHdpbGwgYmUgaWdub3JlZCBkdXJpbmcgc2VhcmNoXG4gICAqXG4gICAqL1xuICBzdGF0aWMgZmlsdGVyKFxuICAgIGl0ZW1zOiBBcnJheTx7IFtrZXk6IHN0cmluZ106IGFueSB9PixcbiAgICB0ZXJtOiBzdHJpbmcsXG4gICAgZXhjbHVkZXM6IGFueSxcbiAgICBsYW5nOiBzdHJpbmdcbiAgKTogQXJyYXk8eyBba2V5OiBzdHJpbmddOiBhbnkgfT4ge1xuICAgIGNvbnN0IHRvQ29tcGFyZSA9IHRlcm0udG9Mb2NhbGVMb3dlckNhc2UobGFuZyk7XG5cbiAgICBmdW5jdGlvbiBjaGVja0luc2lkZShpdGVtOiBhbnksIHRlcm06IHN0cmluZykge1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgaXRlbS50b1N0cmluZygpLnRvTG9jYWxlTG93ZXJDYXNlKGxhbmcpLmluY2x1ZGVzKHRvQ29tcGFyZSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgcHJvcGVydHkgaW4gaXRlbSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaXRlbVtwcm9wZXJ0eV0gPT09IG51bGwgfHxcbiAgICAgICAgICBpdGVtW3Byb3BlcnR5XSA9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICBleGNsdWRlcy5pbmNsdWRlcyhwcm9wZXJ0eSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtW3Byb3BlcnR5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAoY2hlY2tJbnNpZGUoaXRlbVtwcm9wZXJ0eV0sIHRlcm0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgaXRlbVtwcm9wZXJ0eV0udG9TdHJpbmcoKS50b0xvY2FsZUxvd2VyQ2FzZShsYW5nKS5pbmNsdWRlcyh0b0NvbXBhcmUpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGNoZWNrSW5zaWRlKGl0ZW0sIHRlcm0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=