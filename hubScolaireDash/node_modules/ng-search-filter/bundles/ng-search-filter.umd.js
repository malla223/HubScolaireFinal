(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ng-search-filter', ['exports', '@angular/core'], factory) :
    (global = global || self, factory(global['ng-search-filter'] = {}, global.ng.core));
}(this, (function (exports, i0) { 'use strict';

    var NgSearchFilterService = /** @class */ (function () {
        function NgSearchFilterService() {
        }
        Object.defineProperty(NgSearchFilterService.prototype, "defaultLang", {
            get: function () {
                return this._defaultLang || 'tr';
            },
            set: function (defaultLang) {
                this._defaultLang = defaultLang;
            },
            enumerable: false,
            configurable: true
        });
        NgSearchFilterService.prototype.getDefaultLang = function () {
            return this.defaultLang;
        };
        NgSearchFilterService.prototype.setDefaultLang = function (defaultLang) {
            this.defaultLang = defaultLang;
        };
        return NgSearchFilterService;
    }());
    NgSearchFilterService.ɵfac = function NgSearchFilterService_Factory(t) { return new (t || NgSearchFilterService)(); };
    NgSearchFilterService.ɵprov = i0.ɵɵdefineInjectable({ token: NgSearchFilterService, factory: NgSearchFilterService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(NgSearchFilterService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], function () { return []; }, null);
    })();

    var NgSearchFilterPipe = /** @class */ (function () {
        function NgSearchFilterPipe(_ngSearchFilterService) {
            this._ngSearchFilterService = _ngSearchFilterService;
            this._lang = this._ngSearchFilterService.getDefaultLang();
        }
        /**
         * @param items object from array
         * @param term term's search
         * @param excludes array of strings which will ignored during search
         */
        NgSearchFilterPipe.prototype.transform = function (items, term, excludes) {
            if (excludes === void 0) { excludes = []; }
            if (!term || !items)
                return items;
            return NgSearchFilterPipe.filter(items, term, excludes, this._lang);
        };
        /**
         *
         * @param items List of items to filter
         * @param term  a string term to compare with every property of the list
         * @param excludes List of keys which will be ignored during search
         *
         */
        NgSearchFilterPipe.filter = function (items, term, excludes, lang) {
            var toCompare = term.toLocaleLowerCase(lang);
            function checkInside(item, term) {
                if (typeof item === 'string' &&
                    item.toString().toLocaleLowerCase(lang).includes(toCompare)) {
                    return true;
                }
                for (var property in item) {
                    if (item[property] === null ||
                        item[property] == undefined ||
                        excludes.includes(property)) {
                        continue;
                    }
                    if (typeof item[property] === 'object') {
                        if (checkInside(item[property], term)) {
                            return true;
                        }
                    }
                    else if (item[property].toString().toLocaleLowerCase(lang).includes(toCompare)) {
                        return true;
                    }
                }
                return false;
            }
            return items.filter(function (item) {
                return checkInside(item, term);
            });
        };
        return NgSearchFilterPipe;
    }());
    NgSearchFilterPipe.ɵfac = function NgSearchFilterPipe_Factory(t) { return new (t || NgSearchFilterPipe)(i0.ɵɵdirectiveInject(NgSearchFilterService)); };
    NgSearchFilterPipe.ɵpipe = i0.ɵɵdefinePipe({ name: "filter", type: NgSearchFilterPipe, pure: false });
    NgSearchFilterPipe.ɵprov = i0.ɵɵdefineInjectable({ token: NgSearchFilterPipe, factory: NgSearchFilterPipe.ɵfac });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(NgSearchFilterPipe, [{
                type: i0.Pipe,
                args: [{
                        name: 'filter',
                        pure: false,
                    }]
            }, {
                type: i0.Injectable
            }], function () { return [{ type: NgSearchFilterService }]; }, null);
    })();

    var NgSearchFilterModule = /** @class */ (function () {
        function NgSearchFilterModule() {
        }
        return NgSearchFilterModule;
    }());
    NgSearchFilterModule.ɵmod = i0.ɵɵdefineNgModule({ type: NgSearchFilterModule });
    NgSearchFilterModule.ɵinj = i0.ɵɵdefineInjector({ factory: function NgSearchFilterModule_Factory(t) { return new (t || NgSearchFilterModule)(); } });
    (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgSearchFilterModule, { declarations: [NgSearchFilterPipe], exports: [NgSearchFilterPipe] }); })();
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(NgSearchFilterModule, [{
                type: i0.NgModule,
                args: [{
                        declarations: [NgSearchFilterPipe],
                        exports: [NgSearchFilterPipe],
                    }]
            }], null, null);
    })();

    /*
     * Public API Surface of ng-search-filter
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgSearchFilterModule = NgSearchFilterModule;
    exports.NgSearchFilterPipe = NgSearchFilterPipe;
    exports.NgSearchFilterService = NgSearchFilterService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-search-filter.umd.js.map
